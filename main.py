import telebot
import time
import psycopg2
from psycopg2 import IntegrityError
from openai_request import CompletionAI, ExcessTokensException
import sys
from telebot import types, formatting
from telebot.types import ReplyKeyboardMarkup, Message
from telebot.util import quick_markup
from datetime import datetime
from threading import Thread
from bot_users import UserInfo, UserMode
from config import TELEBOT_TOKEN, ADMIN_ID, DB_CONFIG, START_BOT_TEXT

bot = telebot.TeleBot(TELEBOT_TOKEN)
BOT_STOP = False

USERS: dict[int, UserInfo] = {}
KEY_ACTIVE_REQS: dict[str, int] = {}


def _markup_options(chat_id: int) -> ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    # correction of mistakes sucks, will be implemented later
    ask_question = types.KeyboardButton('üí¨ –î–∏–∞–ª–æ–≥')
    detailed_answer = types.KeyboardButton('‚ùî –û–±—à–∏—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç')
    qt = types.KeyboardButton("üö™ –í—ã—Ö–æ–¥")
    instruction = types.KeyboardButton("üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
    if chat_id in ADMIN_ID:
        disable_btn = types.KeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞")
        kb.add(ask_question, detailed_answer, qt, instruction, disable_btn)
    else:
        feedback_btn = types.KeyboardButton("üóØ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
        kb.add(ask_question, detailed_answer, qt, instruction, feedback_btn)
    return kb


def add_user_to_db(chat_id: int):
    try:
        with psycopg2.connect(**DB_CONFIG) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                            INSERT INTO telegram_users
                            VALUES (%s)""", (chat_id,))
            conn.commit()
            print(f"–î–æ–±–∞–≤–ª–µ–Ω —é–∑–µ—Ä {chat_id} –≤ —Ç–∞–±–ª–∏—Ü—É")
    except IntegrityError:
        pass


@bot.message_handler(func=lambda msg: msg.text == "‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å")
@bot.message_handler(commands=["start"])
def start(msg, txt=START_BOT_TEXT):
    if msg.text == "‚ñ∂–ó–∞–ø—É—Å—Ç–∏—Ç—å":
        bot.delete_message(chat_id=msg.chat.id, message_id=msg.id)
    elif msg.text == "/start":
        Thread(target=add_user_to_db, args=(msg.chat.id,), name="user_recording").start()
    if bot.get_chat_member(chat_id=-1001857064307, user_id=msg.chat.id).status in (
            "member", "creator", "administrator"):
        bot.send_message(chat_id=msg.chat.id,
                         text=txt,
                         reply_markup=_markup_options(msg.chat.id))
    else:
        markup = quick_markup({"ChatGPTBOT_channel": {"url": "https://t.me/TestChannelNotForAnyone"}})
        bot.send_message(chat_id=msg.chat.id,
                         text="–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª",
                         reply_markup=markup)


@bot.message_handler(func=lambda msg: msg.text == '‚ùî –û–±—à–∏—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç')
def give_a_detailed_answer(msg):
    bot.delete_message(chat_id=msg.chat.id, message_id=msg.id)
    if bot.get_chat_member(chat_id=-1001857064307, user_id=msg.chat.id).status in (
            "member", "creator", "administrator"):
        bot.send_message(chat_id=msg.chat.id,
                         text="–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –±–æ—Ç –¥–∞–µ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç.",
                         reply_markup=_create_detailed_answer_menu())
        USERS[msg.chat.id] = UserInfo(last_active_datetime=datetime.now(),
                                      mode=UserMode.DETAILED_ANSWER,
                                      has_active_request=False,
                                      replicas="")
        print(f"{msg.from_user.first_name} {msg.from_user.last_name}: –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º '–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥' " +
              f"–≤—Ä–µ–º—è: {USERS[msg.chat.id]['last_active_datetime'].time()}")
    else:
        markup = quick_markup({"ChatGPTBOT_channel": {"url": "https://t.me/TestChannelNotForAnyone"}})
        bot.send_message(chat_id=msg.chat.id,
                         text="–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª",
                         reply_markup=markup)


@bot.message_handler(func=lambda msg: msg.text == 'üí¨ –î–∏–∞–ª–æ–≥')
def ask_a_question(msg):
    bot.delete_message(chat_id=msg.chat.id, message_id=msg.id)
    if bot.get_chat_member(chat_id=-1001857064307, user_id=msg.chat.id).status in (
            "member", "creator", "administrator"):
        bot.send_message(chat_id=msg.chat.id,
                         text="–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥.",
                         reply_markup=_create_dialog_menu())
        USERS[msg.chat.id] = UserInfo(last_active_datetime=datetime.now(),
                                      mode=UserMode.DIALOG,
                                      has_active_request=False,
                                      replicas="")
        print(f"{msg.from_user.first_name} {msg.from_user.last_name}: –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º '–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥' " +

              f"–≤—Ä–µ–º—è: {USERS[msg.chat.id]['last_active_datetime'].time()}")
    else:
        markup = quick_markup({"ChatGPTBOT_channel": {"url": "https://t.me/TestChannelNotForAnyone"}})
        bot.send_message(chat_id=msg.chat.id,
                         text="–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª",
                         reply_markup=markup)


@bot.message_handler(func=lambda msg: msg.text == "üóØ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
def show_feedback_names(msg):
    bot.send_message(chat_id=msg.chat.id,
                     text="–ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞, –ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @osiris_4 –∏ @vadmart")


def _create_launch_menu() -> ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_btn = types.KeyboardButton("‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å")
    kb.add(start_btn)
    return kb


@bot.message_handler(func=lambda msg: msg.text == "üö™ –í—ã—Ö–æ–¥")
def exit_the_mode(msg: Message | int) -> None:
    """
    Function which allows user to exit from the bot.
    :param msg - either Message instance or integer. If integer, it represents a chat id
    """
    try:
        if isinstance(msg, Message):
            print(f"{msg.from_user.first_name} {msg.from_user.last_name}: –≤—ã—Ö–æ–¥")
            bot.send_message(msg.chat.id, "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è)", reply_markup=_create_launch_menu())
            del USERS[msg.chat.id]
        else:
            print(f"USER_ID: {msg}: –≤—ã—Ö–æ–¥")
            bot.send_message(msg, "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è)", reply_markup=_create_launch_menu())
            del USERS[msg]
    except KeyError:
        pass


@bot.message_handler(func=lambda msg: msg.text == "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞")
def disable_bot_menu(msg):
    markup = quick_markup({"1 –º–∏–Ω—É—Ç—É": {"callback_data": "1"},
                           "5 –º–∏–Ω—É—Ç": {"callback_data": "5"},
                           "10 –º–∏–Ω—É—Ç": {"callback_data": "10"},
                           "20 –º–∏–Ω—É—Ç": {"callback_data": "20"}})
    bot.send_message(chat_id=msg.chat.id,
                     text="–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞?",
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def bot_disabler(call):
    global BOT_STOP
    with psycopg2.connect(**DB_CONFIG) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM telegram_users")
        for user_id_tuple in cursor.fetchall():
            try:
                bot.send_message(chat_id=user_id_tuple[0],
                                 text=f"–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ {call.data} –º–∏–Ω—É—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–æ—Ä–∞–±–æ—Ç–æ–∫",
                                 disable_notification=True)
            except telebot.apihelper.ApiTelegramException:
                pass
    time.sleep(int(call.data) * 60)
    with psycopg2.connect(**DB_CONFIG) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM telegram_users")
        for user_id_tuple in cursor.fetchall():
            try:
                bot.send_message(chat_id=user_id_tuple[0],
                                 text=f"–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–æ—Ä–∞–±–æ—Ç–æ–∫",
                                 disable_notification=True,
                                 reply_markup=_create_launch_menu())
            except telebot.apihelper.ApiTelegramException:
                pass
    BOT_STOP = True
    bot.stop_bot()
    time.sleep(60)
    sys.exit()


@bot.message_handler(func=lambda msg: msg.text == "üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
def get_instruction(msg):
    bot.send_message(chat_id=msg.chat.id,
                     text="""
                     –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –±–æ—Ç–∞:
    üí¨ –î–∏–∞–ª–æ–≥ - –±–æ—Ç –¥–∞–µ—Ç –Ω–µ—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç (—Ö–æ—Ç—è –µ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤), –æ–¥–Ω–∞–∫–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ä–µ–ø–ª–∏–∫–∏ –∏, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–ª–µ—Ç–∫–∞?", –∏ –µ—Å–ª–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É "–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ —Ç–µ–±–µ –æ–Ω–∞?", –æ–Ω –¥–∞—Å—Ç –æ—Ç–≤–µ—Ç –∫–∞—Å–∞–µ–º–æ –∫–ª–µ—Ç–∫–∏.
    ‚ùî –û–±—à–∏—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç - –±–æ—Ç –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ä–µ–ø–ª–∏–∫–∏, —Ç–æ –µ—Å—Ç—å, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ–Ω–∏–º–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç. –û–¥–Ω–∞–∫–æ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ, —á–µ–º –≤ —Ä–µ–∂–∏–º–µ "–î–∏–∞–ª–æ–≥". –ü–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ –í—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Ç–µ–º—É, –æ–¥–Ω–∞–∫–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç.""")


@bot.message_handler(func=lambda msg: msg.text == "–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
def start_new_dialog(msg):
    bot.delete_message(chat_id=msg.chat.id, message_id=msg.id)
    try:
        USERS[msg.chat.id]['last_active_datetime'] = datetime.now()
    except KeyError:
        bot.send_message(chat_id=msg.chat.id,
                         text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é!")
        return
    if bot.get_chat_member(chat_id=-1001857064307, user_id=msg.chat.id).status in (
            "member", "creator", "administrator"):
        bot.send_message(chat_id=msg.chat.id, text="–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥!")
    else:
        markup = quick_markup({"ChatGPTBOT_channel": {"url": "https://t.me/TestChannelNotForAnyone"}})
        bot.send_message(chat_id=msg.chat.id,
                         text="–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª",
                         reply_markup=markup)

    print(
        f"{msg.from_user.first_name} {msg.from_user.last_name}: –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞, –≤—Ä–µ–º—è: {USERS[msg.chat.id]['last_active_datetime'].time()}")


@bot.message_handler(func=lambda msg: msg.text == "‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def end_dialog(msg):
    try:
        bot.delete_message(chat_id=msg.chat.id, message_id=msg.id)
        start(msg, "–ù–∞—à –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω:).\n–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:")
        del USERS[msg.chat.id]
        print(
            f"{msg.from_user.first_name} {msg.from_user.last_name}: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞, –≤—Ä–µ–º—è: {USERS[msg.chat.id]['last_active_datetime'].time()}")
    except KeyError:
        pass


@bot.message_handler(func=lambda _: True)
def handle_requests(msg):
    try:
        if not USERS[msg.chat.id]["has_active_request"]:
            if USERS[msg.chat.id]["mode"] == UserMode.DIALOG:
                bot.send_message(chat_id=msg.chat.id,
                                 text=formatting.hitalic("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞üòâ"),
                                 parse_mode="HTML")
                Thread(name=f"User {msg.chat.id}", target=send_dialog_request,
                       args=(msg, f"Thread {msg.chat.id}")).start()
            elif USERS[msg.chat.id]["mode"] == UserMode.DETAILED_ANSWER:
                USERS[msg.chat.id]['replicas'] = ""
                Thread(name=f"User {msg.chat.id}", target=send_detailed_request,
                       args=(msg, f"Thread {msg.chat.id}")).start()
        else:
            bot.send_message(chat_id=msg.chat.id,
                             text=formatting.hitalic("–í–∞—à –æ—Ç–≤–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."),
                             parse_mode="HTML")
    except KeyError:
        bot.send_message(chat_id=msg.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é!")


def send_detailed_request(msg: Message, thr_name: str):
    print(f"{thr_name}: —Å—Ç–∞—Ä—Ç —Ä–∞–±–æ—Ç—ã")
    USERS[msg.chat.id]['has_active_request'] = True
    best_api_key = None
    try:
        bot.send_chat_action(msg.chat.id, "typing")
        best_api_key = min(KEY_ACTIVE_REQS.keys(), key=lambda k: KEY_ACTIVE_REQS[k])
        KEY_ACTIVE_REQS[best_api_key] += 1
        print(
            f"{msg.from_user.first_name} {msg.from_user.last_name}: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –∫–ª—é—á: {best_api_key}, –∫–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: 3200")
        answer = CompletionAI(api_key=best_api_key, txt=msg.text, max_tokens=3200).get_answer()
        print(
            f"{msg.from_user.first_name} {msg.from_user.last_name}: –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞")
        USERS[msg.chat.id]['last_active_datetime'] = datetime.now()
        USERS[msg.chat.id]['has_active_request'] = False
        if USERS[msg.chat.id]["mode"] == UserMode.DETAILED_ANSWER:
            # if user's mode hasn't changed while processing the request
            bot.send_message(msg.chat.id, answer)
        print(
            f"{msg.from_user.first_name} {msg.from_user.last_name}: –≤—Ä–µ–º—è: {USERS[msg.chat.id]['last_active_datetime'].time()}")
    except (telebot.apihelper.ApiTelegramException, ExcessTokensException) as err:
        USERS[msg.chat.id]['last_active_datetime'] = datetime.now()
        USERS[msg.chat.id]['has_active_request'] = False
        if USERS[msg.chat.id]["mode"] == UserMode.DETAILED_ANSWER:
            if type(err).__name__ == "ApiTelegramException":
                bot.send_message(msg.chat.id, "–ù–µ –∑–Ω–∞—é, —á—Ç–æ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å")
            else:
                bot.send_message(msg.chat.id, err)
    except KeyError:
        pass
    finally:
        KEY_ACTIVE_REQS[best_api_key] -= 1
    print(f"{thr_name}: –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã")


def send_dialog_request(msg: Message, thr_name: str):
    print(f"{thr_name}: —Å—Ç–∞—Ä—Ç —Ä–∞–±–æ—Ç—ã")
    USERS[msg.chat.id]['has_active_request'] = True
    best_api_key = None
    try:
        if not msg.text.endswith((".", "?", "!")):
            msg.text += ".\n"
        else:
            msg.text += "\n"
        USERS[msg.chat.id]['replicas'] += msg.text
        bot.send_chat_action(msg.chat.id, "typing")
        best_api_key = min(KEY_ACTIVE_REQS.keys(), key=lambda k: KEY_ACTIVE_REQS[k])
        KEY_ACTIVE_REQS[best_api_key] += 1
        print(
            f"{msg.from_user.first_name} {msg.from_user.last_name}: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –∫–ª—é—á: {best_api_key}, –∫–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: 1600")
        answer = CompletionAI(api_key=best_api_key, txt=USERS[msg.chat.id]['replicas'], max_tokens=1600).get_answer()
        print(
            f"{msg.from_user.first_name} {msg.from_user.last_name}: –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞")
        USERS[msg.chat.id]['replicas'] += answer + "\n"
        USERS[msg.chat.id]['last_active_datetime'] = datetime.now()
        USERS[msg.chat.id]['has_active_request'] = False
        if USERS[msg.chat.id]["mode"] == UserMode.DIALOG:
            bot.send_message(msg.chat.id, answer, reply_markup=_create_dialog_menu())
        print(
            f"{msg.from_user.first_name} {msg.from_user.last_name}: –≤—Ä–µ–º—è: {USERS[msg.chat.id]['last_active_datetime'].time()}")
    except (telebot.apihelper.ApiTelegramException, ExcessTokensException) as err:
        USERS[msg.chat.id]['last_active_datetime'] = datetime.now()
        USERS[msg.chat.id]['has_active_request'] = False
        if USERS[msg.chat.id]["mode"] == UserMode.DIALOG:
            if type(err).__name__ == "ApiTelegramException":
                bot.send_message(msg.chat.id, "–ù–µ –∑–Ω–∞—é, —á—Ç–æ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å")
            else:
                bot.send_message(msg.chat.id, err)
    except KeyError:
        pass
    finally:
        KEY_ACTIVE_REQS[best_api_key] -= 1
    print(f"{thr_name}: –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç—ã")


def _create_dialog_menu() -> ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_new_dial = types.KeyboardButton("–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
    main_menu = types.KeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    kb.add(start_new_dial, main_menu)
    return kb


def _create_detailed_answer_menu() -> ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    main_menu = types.KeyboardButton("‚ò∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    kb.add(main_menu)
    return kb


def run():
    bot.infinity_polling()


def _delete_user(user_id):
    bot.send_message(chat_id=user_id,
                     text="–í—ã –±–µ–∑–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ 10 –º–∏–Ω—É—Ç, –ø–æ—Ç–æ–º—É –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—à–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∂–∏–º–æ–≤ –Ω–∏–∂–µ:",
                     reply_markup=_markup_options(user_id))
    del USERS[user_id]


def check_users():
    while True:
        if BOT_STOP:
            return
        for user_id in list(USERS):
            try:
                if (datetime.now() - USERS[user_id]['last_active_datetime']).seconds > 600:
                    _delete_user(user_id)
            except KeyError:
                pass
        time.sleep(1)


def _init_api_keys():
    with psycopg2.connect(**DB_CONFIG) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT OPENAI_API_KEY FROM TELEGRAM_USERS_KEYS")
        for key_tuple in cursor.fetchall():
            KEY_ACTIVE_REQS[key_tuple[0]] = 0


def _init_users():
    with psycopg2.connect(**DB_CONFIG) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT USER_ID FROM TELEGRAM_USERS")
        for user_id_tup in cursor.fetchall():
            try:
                bot.send_message(chat_id=user_id_tup[0],
                                 text="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—éüôÇ",
                                 reply_markup=_create_launch_menu())
            except telebot.apihelper.ApiTelegramException:
                pass


if __name__ == "__main__":
    _init_api_keys()
    _init_users()
    Thread(name="user_kicker", target=check_users).start()
    run()
